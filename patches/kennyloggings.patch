diff -rupN linux-3.10.0-1160.49.1.el7.x86_64/kernel/audit.c aes/kernel/audit.c
--- linux-3.10.0-1160.49.1.el7.x86_64/kernel/audit.c	2021-11-09 08:29:30.000000000 -0500
+++ aes/kernel/audit.c	2022-01-10 21:51:11.605580507 -0500
@@ -66,6 +66,16 @@
 
 #include "audit.h"
 
+/* Kernel log  integrity */
+#include <linux/random.h>
+#include <crypto/algapi.h>
+#include <linux/siphash.h>
+
+#include "blake2.h"
+#include "blake2-impl.h"
+//---------------------------------------------------------------------------------------
+
+
 /* No auditing will take place until audit_initialized == AUDIT_INITIALIZED.
  * (Initialization happens after skb_init is called.) */
 #define AUDIT_DISABLED		-1
@@ -179,6 +189,373 @@ struct audit_reply {
 	struct sk_buff *skb;
 };
 
+
+//region Kernel log integrity
+//---------------------------------------------------------------------------------------
+
+#define KEYS_PER_SET 100000
+
+static DECLARE_WAIT_QUEUE_HEAD(precompute_wait);
+static atomic_t precompute_go = ATOMIC_INIT(1);
+
+//static DEFINE_SPINLOCK(lock_set_logging);
+
+static siphash_key_t left[KEYS_PER_SET];   // each key is a u64 key[2]
+static siphash_key_t right[KEYS_PER_SET];   // each key is a u64 key[2]
+static siphash_key_t *log_integrity_key_set = left;
+static siphash_key_t *log_integrity_precomputed_key_set = right;
+
+static size_t key_len;
+static int key_index;
+
+struct task_struct *precompute_tsk;
+
+// Sources:
+// Dead Store Elimination (Still) Considered Harmful, USENIX 2017
+// https://compsec.sysnet.ucsd.edu/secure_memzero.h
+//
+void erase_from_memory(void *pointer, size_t size_data) {
+	volatile uint8_t *p = pointer;
+	while (size_data--)
+		*p++ = 0;
+}
+
+static int audit_precompute_keys(void *arg)
+{
+	siphash_key_t latest_key = log_integrity_key_set[KEYS_PER_SET-1];
+	int ret;
+
+	while (!kthread_should_stop()) {
+
+		// Initialize function variables
+		blake2b_state blake_state;
+
+		// Generate KEYS_PER_SET keys and save them to the set
+		int curr_key;
+		for(curr_key = 0; curr_key < KEYS_PER_SET; curr_key++) {
+			ret = blake2b_init(&blake_state, key_len);
+			if (ret != 0) {
+				pr_err("audit: error blake2b_init (%d)\n", ret);
+				break;
+			}
+
+			ret = blake2b_update(&blake_state, (uint8_t *) &latest_key, key_len);
+			if (ret != 0) {
+				pr_err("audit: error blake2b_update (%d)\n", ret);
+				break;
+			}
+
+			ret = blake2b_final(&blake_state, (uint8_t *) &latest_key, key_len);
+			if (ret != 0) {
+				pr_err("audit: error blake2b_final (%d)\n", ret);
+				break;
+			}
+
+			log_integrity_precomputed_key_set[curr_key] = latest_key;
+		}
+
+		// Mark this computation as done
+		atomic_set(&precompute_go, 0);
+
+		// Wait until there are new keys to precompute
+		wait_event_interruptible(precompute_wait, (atomic_read(&precompute_go) == 1) || kthread_should_stop());
+	}
+
+	return 0;
+}
+
+//---------------------------------------------------------------------------------------
+
+static const uint64_t blake2b_IV[8] =
+	{
+		0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
+		0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
+		0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
+		0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
+	};
+
+static const uint8_t blake2b_sigma[12][16] =
+	{
+		{  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
+		{ 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 } ,
+		{ 11,  8, 12,  0,  5,  2, 15, 13, 10, 14,  3,  6,  7,  1,  9,  4 } ,
+		{  7,  9,  3,  1, 13, 12, 11, 14,  2,  6,  5, 10,  4,  0, 15,  8 } ,
+		{  9,  0,  5,  7,  2,  4, 10, 15, 14,  1, 11, 12,  6,  8,  3, 13 } ,
+		{  2, 12,  6, 10,  0, 11,  8,  3,  4, 13,  7,  5, 15, 14,  1,  9 } ,
+		{ 12,  5,  1, 15, 14, 13,  4, 10,  0,  7,  6,  3,  9,  2,  8, 11 } ,
+		{ 13, 11,  7, 14, 12,  1,  3,  9,  5,  0, 15,  4,  8,  6,  2, 10 } ,
+		{  6, 15, 14,  9, 11,  3,  0,  8, 12,  2, 13,  7,  1,  4, 10,  5 } ,
+		{ 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 } ,
+		{  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
+		{ 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 }
+	};
+
+
+static void blake2b_set_lastnode( blake2b_state *S )
+{
+	S->f[1] = (uint64_t)-1;
+}
+
+/* Some helper functions, not necessarily useful */
+static int blake2b_is_lastblock( const blake2b_state *S )
+{
+	return S->f[0] != 0;
+}
+
+static void blake2b_set_lastblock( blake2b_state *S )
+{
+	if( S->last_node ) blake2b_set_lastnode( S );
+
+	S->f[0] = (uint64_t)-1;
+}
+
+static void blake2b_increment_counter( blake2b_state *S, const uint64_t inc )
+{
+	S->t[0] += inc;
+	S->t[1] += ( S->t[0] < inc );
+}
+
+static void blake2b_init0( blake2b_state *S )
+{
+	size_t i;
+	memset( S, 0, sizeof( blake2b_state ) );
+
+	for( i = 0; i < 8; ++i ) S->h[i] = blake2b_IV[i];
+}
+
+/* init xors IV with input parameter block */
+int blake2b_init_param( blake2b_state *S, const blake2b_param *P )
+{
+	const uint8_t *p = ( const uint8_t * )( P );
+	size_t i;
+
+	blake2b_init0( S );
+
+	/* IV XOR ParamBlock */
+	for( i = 0; i < 8; ++i )
+		S->h[i] ^= load64( p + sizeof( S->h[i] ) * i );
+
+	S->outlen = P->digest_length;
+	return 0;
+}
+
+
+
+int blake2b_init( blake2b_state *S, size_t outlen )
+{
+	blake2b_param P[1];
+
+	if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) return -1;
+
+	P->digest_length = (uint8_t)outlen;
+	P->key_length    = 0;
+	P->fanout        = 1;
+	P->depth         = 1;
+	store32( &P->leaf_length, 0 );
+	store32( &P->node_offset, 0 );
+	store32( &P->xof_length, 0 );
+	P->node_depth    = 0;
+	P->inner_length  = 0;
+	memset( P->reserved, 0, sizeof( P->reserved ) );
+	memset( P->salt,     0, sizeof( P->salt ) );
+	memset( P->personal, 0, sizeof( P->personal ) );
+	return blake2b_init_param( S, P );
+}
+
+
+int blake2b_init_key( blake2b_state *S, size_t outlen, const void *key, size_t keylen )
+{
+	blake2b_param P[1];
+
+	if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) return -1;
+
+	if ( !key || !keylen || keylen > BLAKE2B_KEYBYTES ) return -1;
+
+	P->digest_length = (uint8_t)outlen;
+	P->key_length    = (uint8_t)keylen;
+	P->fanout        = 1;
+	P->depth         = 1;
+	store32( &P->leaf_length, 0 );
+	store32( &P->node_offset, 0 );
+	store32( &P->xof_length, 0 );
+	P->node_depth    = 0;
+	P->inner_length  = 0;
+	memset( P->reserved, 0, sizeof( P->reserved ) );
+	memset( P->salt,     0, sizeof( P->salt ) );
+	memset( P->personal, 0, sizeof( P->personal ) );
+
+	if( blake2b_init_param( S, P ) < 0 ) return -1;
+
+	{
+		uint8_t block[BLAKE2B_BLOCKBYTES];
+		memset( block, 0, BLAKE2B_BLOCKBYTES );
+		memcpy( block, key, keylen );
+		blake2b_update( S, block, BLAKE2B_BLOCKBYTES );
+		secure_zero_memory( block, BLAKE2B_BLOCKBYTES ); /* Burn the key from stack */
+	}
+	return 0;
+}
+
+#define G(r,i,a,b,c,d)                      \
+  do {                                      \
+    a = a + b + m[blake2b_sigma[r][2*i+0]]; \
+    d = rotr64(d ^ a, 32);                  \
+    c = c + d;                              \
+    b = rotr64(b ^ c, 24);                  \
+    a = a + b + m[blake2b_sigma[r][2*i+1]]; \
+    d = rotr64(d ^ a, 16);                  \
+    c = c + d;                              \
+    b = rotr64(b ^ c, 63);                  \
+  } while(0)
+
+#define ROUND(r)                    \
+  do {                              \
+    G(r,0,v[ 0],v[ 4],v[ 8],v[12]); \
+    G(r,1,v[ 1],v[ 5],v[ 9],v[13]); \
+    G(r,2,v[ 2],v[ 6],v[10],v[14]); \
+    G(r,3,v[ 3],v[ 7],v[11],v[15]); \
+    G(r,4,v[ 0],v[ 5],v[10],v[15]); \
+    G(r,5,v[ 1],v[ 6],v[11],v[12]); \
+    G(r,6,v[ 2],v[ 7],v[ 8],v[13]); \
+    G(r,7,v[ 3],v[ 4],v[ 9],v[14]); \
+  } while(0)
+
+static void blake2b_compress( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] )
+{
+	uint64_t m[16];
+	uint64_t v[16];
+	size_t i;
+
+	for( i = 0; i < 16; ++i ) {
+		m[i] = load64( block + i * sizeof( m[i] ) );
+	}
+
+	for( i = 0; i < 8; ++i ) {
+		v[i] = S->h[i];
+	}
+
+	v[ 8] = blake2b_IV[0];
+	v[ 9] = blake2b_IV[1];
+	v[10] = blake2b_IV[2];
+	v[11] = blake2b_IV[3];
+	v[12] = blake2b_IV[4] ^ S->t[0];
+	v[13] = blake2b_IV[5] ^ S->t[1];
+	v[14] = blake2b_IV[6] ^ S->f[0];
+	v[15] = blake2b_IV[7] ^ S->f[1];
+
+	ROUND( 0 );
+	ROUND( 1 );
+	ROUND( 2 );
+	ROUND( 3 );
+	ROUND( 4 );
+	ROUND( 5 );
+	ROUND( 6 );
+	ROUND( 7 );
+	ROUND( 8 );
+	ROUND( 9 );
+	ROUND( 10 );
+	ROUND( 11 );
+
+	for( i = 0; i < 8; ++i ) {
+		S->h[i] = S->h[i] ^ v[i] ^ v[i + 8];
+	}
+}
+
+#undef G
+#undef ROUND
+
+int blake2b_update( blake2b_state *S, const void *pin, size_t inlen )
+{
+	const unsigned char * in = (const unsigned char *)pin;
+	if( inlen > 0 )
+	{
+		size_t left = S->buflen;
+		size_t fill = BLAKE2B_BLOCKBYTES - left;
+		if( inlen > fill )
+		{
+			S->buflen = 0;
+			memcpy( S->buf + left, in, fill ); /* Fill buffer */
+			blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
+			blake2b_compress( S, S->buf ); /* Compress */
+			in += fill; inlen -= fill;
+			while(inlen > BLAKE2B_BLOCKBYTES) {
+				blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
+				blake2b_compress( S, in );
+				in += BLAKE2B_BLOCKBYTES;
+				inlen -= BLAKE2B_BLOCKBYTES;
+			}
+		}
+		memcpy( S->buf + S->buflen, in, inlen );
+		S->buflen += inlen;
+	}
+	return 0;
+}
+
+int blake2b_final( blake2b_state *S, void *out, size_t outlen )
+{
+	uint8_t buffer[BLAKE2B_OUTBYTES] = {0};
+	size_t i;
+
+	if( out == NULL || outlen < S->outlen )
+		return -1;
+
+	if( blake2b_is_lastblock( S ) )
+		return -1;
+
+	blake2b_increment_counter( S, S->buflen );
+	blake2b_set_lastblock( S );
+	memset( S->buf + S->buflen, 0, BLAKE2B_BLOCKBYTES - S->buflen ); /* Padding */
+	blake2b_compress( S, S->buf );
+
+	for( i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
+		store64( buffer + sizeof( S->h[i] ) * i, S->h[i] );
+
+	memcpy( out, buffer, S->outlen );
+	secure_zero_memory(buffer, sizeof(buffer));
+	return 0;
+}
+
+/* inlen, at least, should be uint64_t. Others can be size_t. */
+int blake2b( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen )
+{
+	blake2b_state S[1];
+
+	/* Verify parameters */
+	if ( NULL == in && inlen > 0 ) return -1;
+
+	if ( NULL == out ) return -1;
+
+	if( NULL == key && keylen > 0 ) return -1;
+
+	if( !outlen || outlen > BLAKE2B_OUTBYTES ) return -1;
+
+	if( keylen > BLAKE2B_KEYBYTES ) return -1;
+
+	if( keylen > 0 )
+	{
+		if( blake2b_init_key( S, outlen, key, keylen ) < 0 ) return -1;
+	}
+	else
+	{
+		if( blake2b_init( S, outlen ) < 0 ) return -1;
+	}
+
+	blake2b_update( S, ( const uint8_t * )in, inlen );
+	blake2b_final( S, out, outlen );
+	return 0;
+}
+
+int blake2( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen ) {
+	return blake2b(out, outlen, in, inlen, key, keylen);
+}
+
+//---------------------------------------------------------------------------------------
+//endregion
+
+
+
+
+
 static void audit_set_portid(struct audit_buffer *ab, __u32 portid)
 {
 	if (ab) {
@@ -1076,7 +1453,11 @@ static void audit_receive(struct sk_buff
 /* Initialize audit support at boot time. */
 static int __init audit_init(void)
 {
-	int i;
+	int i, ret; 
+	blake2b_state blake_state;
+	siphash_key_t first_key;
+	siphash_key_t curr_key;
+	/* Kernel log integrity */
 	struct netlink_kernel_cfg cfg = {
 		.input	= audit_receive,
 	};
@@ -1100,6 +1481,46 @@ static int __init audit_init(void)
 
 	for (i = 0; i < AUDIT_INODE_BUCKETS; i++)
 		INIT_LIST_HEAD(&audit_inode_hash[i]);
+	
+	//---------------------------------------------------------------------------------------
+#if 1
+	/* Kernel log integrity */
+	key_len = sizeof(first_key);
+	get_random_bytes(&first_key, key_len);
+	
+
+	// Precompute first set synchronously
+	
+	curr_key = first_key;
+	for(i = 0; i < KEYS_PER_SET; i++) {
+		ret = blake2b_init(&blake_state, key_len);
+		if (ret != 0) {
+			//pr_err("audit: error blake2b_init (%d)\n", ret);
+			break;
+		}
+		ret = blake2b_update(&blake_state, (uint8_t *) &curr_key, key_len);
+		if (ret != 0) {
+			//pr_err("audit: error blake2b_update (%d)\n", ret);
+			break;
+		}
+
+		ret = blake2b_final(&blake_state, (uint8_t *) &curr_key, key_len);
+		if (ret != 0) {
+			//pr_err("audit: error blake2b_final (%d)\n", ret);
+			break;
+		}
+		log_integrity_key_set[i] = curr_key;
+	}
+
+	// Precompute second set asynchronously
+	precompute_tsk = kthread_run(audit_precompute_keys, NULL, "audit_precompute_keys");
+	if (IS_ERR(precompute_tsk)) {
+		int err = PTR_ERR(precompute_tsk);
+		panic("audit: failed to start the precompute_tsk thread (%d)\n", err);
+	}
+#endif
+	//---------------------------------------------------------------------------------------
+
 
 	return 0;
 }
@@ -1895,21 +2316,70 @@ out:
  */
 void audit_log_end(struct audit_buffer *ab)
 {
+	//struct sk_buff *skb;
+ 	struct nlmsghdr *nlh;
+	char *log_msg; 		// log message
+	size_t log_msg_len;
+	u64 integrity_proof;
+	siphash_key_t * swap;
+	unsigned long flags;
+
 	if (!ab)
 		return;
 	if (!audit_rate_check()) {
 		audit_log_lost("rate limit exceeded");
 	} else {
-		struct nlmsghdr *nlh = nlmsg_hdr(ab->skb);
+		nlh = nlmsg_hdr(ab->skb);
+
+	/*Kennylog integrity*/
+#if 1
+		log_msg = nlmsg_data(nlh);
+		log_msg_len = strlen(log_msg);
+
+	/* Perform the cryptographic operations synchronously */
+		spin_lock_irqsave(&(&audit_skb_queue)->lock, flags);
+		/* Compute proof of integrity */
+		integrity_proof = siphash(log_msg, log_msg_len, &(log_integrity_key_set[key_index]));
+		/* Erase used key from memory */
+		erase_from_memory(&(log_integrity_key_set[key_index]), key_len);
+		/* Add MAC to log event */
+		audit_log_format(ab, " p=%llx", (unsigned long long) integrity_proof);
+		/* Check if all keys are used */
+		if (++key_index == KEYS_PER_SET) {
+
+			// Wait for current precomputation to end
+			while (atomic_read(&precompute_go) == 1) {}
+
+			// Set new set and new key index
+			swap = log_integrity_key_set;
+			log_integrity_key_set = log_integrity_precomputed_key_set;
+			log_integrity_precomputed_key_set = swap;
+			key_index = 0;
+
+			// Signal precomputing thread to precompute new keys
+			atomic_set(&precompute_go, 1);
+
+			// Wake up precomputing thread
+			wake_up(&precompute_wait);
+		}
+#endif
+
+
 		nlh->nlmsg_len = ab->skb->len - NLMSG_HDRLEN;
 
 		if (audit_pid) {
-			skb_queue_tail(&audit_skb_queue, ab->skb);
+			__skb_queue_tail(&audit_skb_queue, ab->skb);
+			spin_unlock_irqrestore(&(&audit_skb_queue)->lock, flags);
 			wake_up_interruptible(&kauditd_wait);
 		} else {
+			spin_unlock_irqrestore(&(&audit_skb_queue)->lock, flags);
 			audit_printk_skb(ab->skb);
 		}
+
+//----------------------------------		
 		ab->skb = NULL;
+
+		
 	}
 	audit_buffer_free(ab);
 }
diff -rupN linux-3.10.0-1160.49.1.el7.x86_64/kernel/blake2.h aes/kernel/blake2.h
--- linux-3.10.0-1160.49.1.el7.x86_64/kernel/blake2.h	1969-12-31 19:00:00.000000000 -0500
+++ aes/kernel/blake2.h	2022-01-10 21:50:51.256382433 -0500
@@ -0,0 +1,194 @@
+/*
+   BLAKE2 reference source code package - reference C implementations
+
+   Copyright 2012, Samuel Neves <sneves@dei.uc.pt>.  You may use this under the
+   terms of the CC0, the OpenSSL Licence, or the Apache Public License 2.0, at
+   your option.  The terms of these licenses can be found at:
+
+   - CC0 1.0 Universal : http://creativecommons.org/publicdomain/zero/1.0
+   - OpenSSL license   : https://www.openssl.org/source/license.html
+   - Apache 2.0        : http://www.apache.org/licenses/LICENSE-2.0
+
+   More information about the BLAKE2 hash function can be found at
+   https://blake2.net.
+*/
+
+
+#ifndef BLAKE2_H
+#define BLAKE2_H
+
+#if defined(_MSC_VER)
+#define BLAKE2_PACKED(x) __pragma(pack(push, 1)) x __pragma(pack(pop))
+#else
+#define BLAKE2_PACKED(x) x __attribute__((packed))
+#endif
+
+#if defined(__cplusplus)
+extern "C" {
+#endif
+
+  enum blake2s_constant
+  {
+    BLAKE2S_BLOCKBYTES = 64,
+    BLAKE2S_OUTBYTES   = 32,
+    BLAKE2S_KEYBYTES   = 32,
+    BLAKE2S_SALTBYTES  = 8,
+    BLAKE2S_PERSONALBYTES = 8
+  };
+
+  enum blake2b_constant
+  {
+    BLAKE2B_BLOCKBYTES = 128,
+    BLAKE2B_OUTBYTES   = 64,
+    BLAKE2B_KEYBYTES   = 64,
+    BLAKE2B_SALTBYTES  = 16,
+    BLAKE2B_PERSONALBYTES = 16
+  };
+
+  typedef struct blake2s_state__
+  {
+    uint32_t h[8];
+    uint32_t t[2];
+    uint32_t f[2];
+    uint8_t  buf[BLAKE2S_BLOCKBYTES];
+    size_t   buflen;
+    size_t   outlen;
+    uint8_t  last_node;
+  } blake2s_state;
+
+  typedef struct blake2b_state__
+  {
+    uint64_t h[8];
+    uint64_t t[2];
+    uint64_t f[2];
+    uint8_t  buf[BLAKE2B_BLOCKBYTES];
+    size_t   buflen;
+    size_t   outlen;
+    uint8_t  last_node;
+  } blake2b_state;
+
+  typedef struct blake2sp_state__
+  {
+    blake2s_state S[8][1];
+    blake2s_state R[1];
+    uint8_t       buf[8 * BLAKE2S_BLOCKBYTES];
+    size_t        buflen;
+    size_t        outlen;
+  } blake2sp_state;
+
+  typedef struct blake2bp_state__
+  {
+    blake2b_state S[4][1];
+    blake2b_state R[1];
+    uint8_t       buf[4 * BLAKE2B_BLOCKBYTES];
+    size_t        buflen;
+    size_t        outlen;
+  } blake2bp_state;
+
+
+  BLAKE2_PACKED(struct blake2s_param__
+  {
+    uint8_t  digest_length; /* 1 */
+    uint8_t  key_length;    /* 2 */
+    uint8_t  fanout;        /* 3 */
+    uint8_t  depth;         /* 4 */
+    uint32_t leaf_length;   /* 8 */
+    uint32_t node_offset;  /* 12 */
+    uint16_t xof_length;    /* 14 */
+    uint8_t  node_depth;    /* 15 */
+    uint8_t  inner_length;  /* 16 */
+    /* uint8_t  reserved[0]; */
+    uint8_t  salt[BLAKE2S_SALTBYTES]; /* 24 */
+    uint8_t  personal[BLAKE2S_PERSONALBYTES];  /* 32 */
+  });
+
+  typedef struct blake2s_param__ blake2s_param;
+
+  BLAKE2_PACKED(struct blake2b_param__
+  {
+    uint8_t  digest_length; /* 1 */
+    uint8_t  key_length;    /* 2 */
+    uint8_t  fanout;        /* 3 */
+    uint8_t  depth;         /* 4 */
+    uint32_t leaf_length;   /* 8 */
+    uint32_t node_offset;   /* 12 */
+    uint32_t xof_length;    /* 16 */
+    uint8_t  node_depth;    /* 17 */
+    uint8_t  inner_length;  /* 18 */
+    uint8_t  reserved[14];  /* 32 */
+    uint8_t  salt[BLAKE2B_SALTBYTES]; /* 48 */
+    uint8_t  personal[BLAKE2B_PERSONALBYTES];  /* 64 */
+  });
+
+  typedef struct blake2b_param__ blake2b_param;
+
+  typedef struct blake2xs_state__
+  {
+    blake2s_state S[1];
+    blake2s_param P[1];
+  } blake2xs_state;
+
+  typedef struct blake2xb_state__
+  {
+    blake2b_state S[1];
+    blake2b_param P[1];
+  } blake2xb_state;
+
+  /* Padded structs result in a compile-time error */
+  enum {
+    BLAKE2_DUMMY_1 = 1/(sizeof(blake2s_param) == BLAKE2S_OUTBYTES),
+    BLAKE2_DUMMY_2 = 1/(sizeof(blake2b_param) == BLAKE2B_OUTBYTES)
+  };
+
+  /* Streaming API */
+  int blake2s_init( blake2s_state *S, size_t outlen );
+  int blake2s_init_key( blake2s_state *S, size_t outlen, const void *key, size_t keylen );
+  int blake2s_init_param( blake2s_state *S, const blake2s_param *P );
+  int blake2s_update( blake2s_state *S, const void *in, size_t inlen );
+  int blake2s_final( blake2s_state *S, void *out, size_t outlen );
+
+  int blake2b_init( blake2b_state *S, size_t outlen );
+  int blake2b_init_key( blake2b_state *S, size_t outlen, const void *key, size_t keylen );
+  int blake2b_init_param( blake2b_state *S, const blake2b_param *P );
+  int blake2b_update( blake2b_state *S, const void *in, size_t inlen );
+  int blake2b_final( blake2b_state *S, void *out, size_t outlen );
+
+  int blake2sp_init( blake2sp_state *S, size_t outlen );
+  int blake2sp_init_key( blake2sp_state *S, size_t outlen, const void *key, size_t keylen );
+  int blake2sp_update( blake2sp_state *S, const void *in, size_t inlen );
+  int blake2sp_final( blake2sp_state *S, void *out, size_t outlen );
+
+  int blake2bp_init( blake2bp_state *S, size_t outlen );
+  int blake2bp_init_key( blake2bp_state *S, size_t outlen, const void *key, size_t keylen );
+  int blake2bp_update( blake2bp_state *S, const void *in, size_t inlen );
+  int blake2bp_final( blake2bp_state *S, void *out, size_t outlen );
+
+  /* Variable output length API */
+  int blake2xs_init( blake2xs_state *S, const size_t outlen );
+  int blake2xs_init_key( blake2xs_state *S, const size_t outlen, const void *key, size_t keylen );
+  int blake2xs_update( blake2xs_state *S, const void *in, size_t inlen );
+  int blake2xs_final(blake2xs_state *S, void *out, size_t outlen);
+
+  int blake2xb_init( blake2xb_state *S, const size_t outlen );
+  int blake2xb_init_key( blake2xb_state *S, const size_t outlen, const void *key, size_t keylen );
+  int blake2xb_update( blake2xb_state *S, const void *in, size_t inlen );
+  int blake2xb_final(blake2xb_state *S, void *out, size_t outlen);
+
+  /* Simple API */
+  int blake2s( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen );
+  int blake2b( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen );
+
+  int blake2sp( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen );
+  int blake2bp( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen );
+
+  int blake2xs( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen );
+  int blake2xb( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen );
+
+  /* This is simply an alias for blake2b */
+  int blake2( void *out, size_t outlen, const void *in, size_t inlen, const void *key, size_t keylen );
+
+#if defined(__cplusplus)
+}
+#endif
+
+#endif
diff -rupN linux-3.10.0-1160.49.1.el7.x86_64/kernel/blake2-impl.h aes/kernel/blake2-impl.h
--- linux-3.10.0-1160.49.1.el7.x86_64/kernel/blake2-impl.h	1969-12-31 19:00:00.000000000 -0500
+++ aes/kernel/blake2-impl.h	2022-01-10 21:51:01.273479937 -0500
@@ -0,0 +1,157 @@
+/*
+   BLAKE2 reference source code package - reference C implementations
+
+   Copyright 2012, Samuel Neves <sneves@dei.uc.pt>.  You may use this under the
+   terms of the CC0, the OpenSSL Licence, or the Apache Public License 2.0, at
+   your option.  The terms of these licenses can be found at:
+
+   - CC0 1.0 Universal : http://creativecommons.org/publicdomain/zero/1.0
+   - OpenSSL license   : https://www.openssl.org/source/license.html
+   - Apache 2.0        : http://www.apache.org/licenses/LICENSE-2.0
+
+   More information about the BLAKE2 hash function can be found at
+   https://blake2.net.
+*/
+#ifndef BLAKE2_IMPL_H
+#define BLAKE2_IMPL_H
+
+#if !defined(__cplusplus) && (!defined(__STDC_VERSION__) || __STDC_VERSION__ < 199901L)
+  #if   defined(_MSC_VER)
+    #define BLAKE2_INLINE __inline
+  #elif defined(__GNUC__)
+    #define BLAKE2_INLINE __inline__
+  #else
+    #define BLAKE2_INLINE
+  #endif
+#else
+  #define BLAKE2_INLINE inline
+#endif
+
+static BLAKE2_INLINE uint32_t load32( const void *src )
+{
+#if defined(NATIVE_LITTLE_ENDIAN)
+  uint32_t w;
+  memcpy(&w, src, sizeof w);
+  return w;
+#else
+  const uint8_t *p = ( const uint8_t * )src;
+  return (( uint32_t )( p[0] ) <<  0) |
+         (( uint32_t )( p[1] ) <<  8) |
+         (( uint32_t )( p[2] ) << 16) |
+         (( uint32_t )( p[3] ) << 24) ;
+#endif
+}
+
+static BLAKE2_INLINE uint64_t load64( const void *src )
+{
+#if defined(NATIVE_LITTLE_ENDIAN)
+  uint64_t w;
+  memcpy(&w, src, sizeof w);
+  return w;
+#else
+  const uint8_t *p = ( const uint8_t * )src;
+  return (( uint64_t )( p[0] ) <<  0) |
+         (( uint64_t )( p[1] ) <<  8) |
+         (( uint64_t )( p[2] ) << 16) |
+         (( uint64_t )( p[3] ) << 24) |
+         (( uint64_t )( p[4] ) << 32) |
+         (( uint64_t )( p[5] ) << 40) |
+         (( uint64_t )( p[6] ) << 48) |
+         (( uint64_t )( p[7] ) << 56) ;
+#endif
+}
+
+static BLAKE2_INLINE uint16_t load16( const void *src )
+{
+#if defined(NATIVE_LITTLE_ENDIAN)
+  uint16_t w;
+  memcpy(&w, src, sizeof w);
+  return w;
+#else
+  const uint8_t *p = ( const uint8_t * )src;
+  return ( uint16_t )((( uint32_t )( p[0] ) <<  0) |
+                      (( uint32_t )( p[1] ) <<  8));
+#endif
+}
+
+static BLAKE2_INLINE void store16( void *dst, uint16_t w )
+{
+#if defined(NATIVE_LITTLE_ENDIAN)
+  memcpy(dst, &w, sizeof w);
+#else
+  uint8_t *p = ( uint8_t * )dst;
+  *p++ = ( uint8_t )w; w >>= 8;
+  *p++ = ( uint8_t )w;
+#endif
+}
+
+static BLAKE2_INLINE void store32( void *dst, uint32_t w )
+{
+#if defined(NATIVE_LITTLE_ENDIAN)
+  memcpy(dst, &w, sizeof w);
+#else
+  uint8_t *p = ( uint8_t * )dst;
+  p[0] = (uint8_t)(w >>  0);
+  p[1] = (uint8_t)(w >>  8);
+  p[2] = (uint8_t)(w >> 16);
+  p[3] = (uint8_t)(w >> 24);
+#endif
+}
+
+static BLAKE2_INLINE void store64( void *dst, uint64_t w )
+{
+#if defined(NATIVE_LITTLE_ENDIAN)
+  memcpy(dst, &w, sizeof w);
+#else
+  uint8_t *p = ( uint8_t * )dst;
+  p[0] = (uint8_t)(w >>  0);
+  p[1] = (uint8_t)(w >>  8);
+  p[2] = (uint8_t)(w >> 16);
+  p[3] = (uint8_t)(w >> 24);
+  p[4] = (uint8_t)(w >> 32);
+  p[5] = (uint8_t)(w >> 40);
+  p[6] = (uint8_t)(w >> 48);
+  p[7] = (uint8_t)(w >> 56);
+#endif
+}
+
+static BLAKE2_INLINE uint64_t load48( const void *src )
+{
+  const uint8_t *p = ( const uint8_t * )src;
+  return (( uint64_t )( p[0] ) <<  0) |
+         (( uint64_t )( p[1] ) <<  8) |
+         (( uint64_t )( p[2] ) << 16) |
+         (( uint64_t )( p[3] ) << 24) |
+         (( uint64_t )( p[4] ) << 32) |
+         (( uint64_t )( p[5] ) << 40) ;
+}
+
+static BLAKE2_INLINE void store48( void *dst, uint64_t w )
+{
+  uint8_t *p = ( uint8_t * )dst;
+  p[0] = (uint8_t)(w >>  0);
+  p[1] = (uint8_t)(w >>  8);
+  p[2] = (uint8_t)(w >> 16);
+  p[3] = (uint8_t)(w >> 24);
+  p[4] = (uint8_t)(w >> 32);
+  p[5] = (uint8_t)(w >> 40);
+}
+
+static BLAKE2_INLINE uint32_t rotr32( const uint32_t w, const unsigned c )
+{
+  return ( w >> c ) | ( w << ( 32 - c ) );
+}
+
+static BLAKE2_INLINE uint64_t rotr64( const uint64_t w, const unsigned c )
+{
+  return ( w >> c ) | ( w << ( 64 - c ) );
+}
+
+/* prevents compiler optimizing out memset() */
+static BLAKE2_INLINE void secure_zero_memory(void *v, size_t n)
+{
+  static void *(*const volatile memset_v)(void *, int, size_t) = &memset;
+  memset_v(v, 0, n);
+}
+
+#endif
